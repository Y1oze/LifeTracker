import nest_asyncio
nest_asyncio.apply()
import asyncio
import datetime
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "7682758333:AAFYDUrGbux1B4NkhVAMl9eCHqMWeZfrYAo"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHAT_ID = "851557417"  # ID —Ç–≤–æ–µ–≥–æ —á–∞—Ç–∞
BIRTH_DATE = datetime.date(2006, 8, 9)  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
LIFE_EXPECTANCY_YEARS = 80  # –î–æ –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å—á–∏—Ç–∞–µ–º

# === –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å –∂–∏–∑–Ω–∏ ===
def calculate_weeks():
    today = datetime.date.today()
    total_weeks = LIFE_EXPECTANCY_YEARS * 52  # –í—Å–µ–≥–æ –Ω–µ–¥–µ–ª—å –≤ –∂–∏–∑–Ω–∏
    lived_weeks = (today - BIRTH_DATE).days // 7  # –ü—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å
    remaining_weeks = total_weeks - lived_weeks  # –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–µ–ª—å
    percent_lived = round((lived_weeks / total_weeks) * 100, 2)
    percent_remaining = round((remaining_weeks / total_weeks) * 100, 2)
    
    return lived_weeks, remaining_weeks, percent_lived, percent_remaining

# === –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status ===
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lived_weeks, remaining_weeks, percent_lived, percent_remaining = calculate_weeks()
    message = (f"üìÖ **–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:** {lived_weeks}\n"
               f"‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å:** {remaining_weeks} –Ω–µ–¥–µ–ª—å\n"
               f"üìä **–ü—Ä–æ–∂–∏—Ç–æ:** {percent_lived}%\n"
               f"üîÑ **–û—Å—Ç–∞–ª–æ—Å—å:** {percent_remaining}%")
    await update.message.reply_text(message, parse_mode='Markdown')

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def send_weekly_message():
    bot = Bot(token=TOKEN)
    while True:
        now = datetime.datetime.now()
        next_monday = now + datetime.timedelta(days=(7 - now.weekday()))
        next_monday = next_monday.replace(hour=9, minute=0, second=0)
        time_to_sleep = (next_monday - now).total_seconds()
        
        await asyncio.sleep(time_to_sleep)  # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        lived_weeks, remaining_weeks, percent_lived, percent_remaining = calculate_weeks()
        message = (f"üìÖ **–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:** {lived_weeks}\n"
                   f"‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å:** {remaining_weeks} –Ω–µ–¥–µ–ª—å\n"
                   f"üìä **–ü—Ä–æ–∂–∏—Ç–æ:** {percent_lived}%\n"
                   f"üîÑ **–û—Å—Ç–∞–ª–æ—Å—å:** {percent_remaining}%")
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    app.add_handler(CommandHandler("status", status))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(send_weekly_message())

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main(), debug=True)